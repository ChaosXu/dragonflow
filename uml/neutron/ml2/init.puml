@startuml initialize
Neutron->DFMechDriver:initialize(self)
activate DFMechDriver

DFMechDriver->DFMechDriver:nb_api = None

' # When set to True, Nova plugs the VIF directly into the ovs bridge
' # instead of using the hybrid mode.
DFMechDriver->DFMechDriver:vif_details = {portbindings.CAP_PORT_FILTER: True}
DFMechDriver->DFMechDriver:vif_type = portbindings.VIF_TYPE_OVS
DFMechDriver->DFMechDriver:_set_base_port_binding()
DFMechDriver->DFMechDriver:port_status = n_const.PORT_STATUS_ACTIVE
DFMechDriver->DFMechDriver:trunk_driver = trunk_driver.DfTrunkDriver()
alt cfg.CONF.df.auto_detect_port_behind_port:
    DFMechDriver->DFMechDriver:_port_behind_port_detector = (port_behind_port.DfPortBehindPortDetector())
end
alt cfg.CONF.df_loadbalancer.auto_enable_vip_ports:
    DFMechDriver->DFMechDriver:_vip_port_enabler = vip_port_enabler.DfLBaaSVIPPortEnabler()
end
DFMechDriver->DFMechDriver:subscribe_registries()
activate DFMechDriver
DFMechDriver->registry:subscribe(self.post_fork_initialize,resources.PROCESS,events.AFTER_INIT)
activate DFMechDriver
' # NOTE(nick-ma-z): This will initialize all workers (API, RPC,
' # plugin service, etc) and threads with network connections.
DFMechDriver->api_nb.NbApi:self.nb_api = get_instance()
DFMechDriver->df_qos:initialize(self.nb_api)
alt cfg.CONF.df.enable_neutron_notifier
    DFMechDriver->df_utils:neutron_notifier = load_driver(cfg.CONF.df.neutron_notifier,df_utils.DF_NEUTRON_NOTIFIER_DRIVER_NAMESPACE)
    DFMechDriver->neutron_notifier:initialize(self.nb_api,is_neutron_server=True)
    DFMechDriver->DFMechDriver:port_status = None
end
deactivate
DFMechDriver->registry:subscribe(self.update_security_group,resources.SECURITY_GROUP,events.AFTER_CREATE)
DFMechDriver->registry:subscribe(self.update_security_group,resources.SECURITY_GROUP,events.AFTER_UPDATE)
DFMechDriver->registry:subscribe(self.delete_security_group,resources.SECURITY_GROUP,events.BEFORE_DELETE)
DFMechDriver->registry:subscribe(self.create_security_group_rule,resources.SECURITY_GROUP_RULE,events.AFTER_CREATE)
DFMechDriver->registry:subscribe(self.delete_security_group_rule,resources.SECURITY_GROUP_RULE,events.AFTER_DELETE)
deactivate
DFMechDriver->df_qos:register()
DFMechDriver->DFMechDriver:dhcp_module = dhcp_module.DFDHCPModule()
deactivate
@enduml