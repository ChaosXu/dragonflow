@startuml check_topology_info
DfLocalController->Topology:check_topology_info(self)
activate Topology
note over Topology
    """
    In order to prevent the situation that the connection between
    df controller and df db break down, we should recheck the local
    ovs ports to make sure all the topics of these ovs ports could
    be subscribed and all the vms could work well.
    """

    new_ovs_to_lport_mapping = {}
    add_ovs_to_lport_mapping = {}
    delete_ovs_to_lport_mapping = self.ovs_to_lport_mapping
end note
loop switch_port in self.db_store.get_all(switch.SwitchPort)
    Topology->switch_port:key = id
    alt switch_port.type == constants.SWITCH_COMPUTE_INTERFACE
        Topology->Topology:lport = _get_lport(switch_port)
        alt lport is None
            note over Topology
                LOG.warning("No logical port found for ovs port: %r",switch_port)
                continue
            end note
        end
        Topology->lport:topic = topic
        alt not topic
            note over Topology
                continue
            end note
        end
        Topology->OvsLportMapping:new_ovs_to_lport_mapping[key] = OvsLportMapping(lport_id=lport.id, topic=topic)
        alt not delete_ovs_to_lport_mapping.pop(key, None)
            Topology->OvsLportMapping:add_ovs_to_lport_mapping[key] = OvsLportMapping(lport_id=lport.id, topic=topic)
        end
    end
    Topology->Topology:ovs_to_lport_mapping = new_ovs_to_lport_mapping
    loop value in add_ovs_to_lport_mapping.values()
        Topology->value:lport_id = lport_id
        Topology->value:topic = topic
        Topology->Topology:_add_to_topic_subscribed(topic, lport_id)
        activate Topology
        alt not self.enable_selective_topo_dist or not topic
            Topology-->Topology
        end
        alt topic not in self.topic_subscribed
            ' LOG.info("Subscribe topic: %(topic)s by lport: %(id)s",{"topic": topic, "id": lport_id})
            Topology->DfLocalController:register_topic(topic)
            Topology->topic_subscribed:topic_subscribed[topic] = set([lport_id])
        else
            Topology->topic_subscribed:topic_subscribed[topic].add(lport_id)
        end
        deactivate
    end
    loop value in delete_ovs_to_lport_mapping.values()
        Topology->value:lport_id = lport_id
        Topology->value:topic = topic
        Topology->Topology:_del_from_topic_subscribed(topic, lport_id)
    end
    deactivate
    @enduml